import { providers, utils, Wallet } from 'ethers'
import { FlashbotsBundleConflictType, FlashbotsBundleProvider, FlashbotsGasPricing } from './index'
import fs from 'fs'

// ===== Uncomment this for mainnet =======
const CHAIN_ID = 1
const provider = new providers.JsonRpcProvider(
  { url: 'https://mainnet.chainnodes.org/f8df1ee3-8aaa-471e-bc3b-b3d18af3bd3c' || 'HTTP://127.0.0.1:7545' },
  { chainId: CHAIN_ID, ensAddress: '', name: 'mainnet' }
)
const FLASHBOTS_EP = undefined
// ===== Uncomment this for mainnet =======

// ===== Uncomment this for Goerli =======
// const CHAIN_ID = 5
// const provider = new providers.InfuraProvider(CHAIN_ID, process.env.INFURA_API_KEY)
// const FLASHBOTS_EP = 'https://relay-goerli.flashbots.net/'
// ===== Uncomment this for Goerli =======

function printGasPricing(gasPricing: FlashbotsGasPricing) {
  console.log(`Gas Used: ${gasPricing.gasUsed} in ${gasPricing.txCount} txs`)
  console.log(`[searcher] Gas Fees: ${utils.formatUnits(gasPricing.gasFeesPaidBySearcher)} ETH`)
  console.log(`[searcher] Effective Gas Price: ${utils.formatUnits(gasPricing.effectiveGasPriceToSearcher, 'gwei')} gwei`)
  console.log(`[miner] Priority Fees: ${utils.formatUnits(gasPricing.priorityFeesReceivedByMiner)} ETH`)
  console.log(`[miner] Effective Priority Fee Per Gas: ${utils.formatUnits(gasPricing.effectivePriorityFeeToMiner, 'gwei')} gwei`)
}

async function main() {
  const authSigner = Wallet.createRandom()
  const flashbotsProvider = await FlashbotsBundleProvider.create(provider, authSigner, FLASHBOTS_EP)

  //// Conflicting By Gas Used (Opportunity gone, tx does not revert)
  // const conflictReport = await flashbotsProvider.getConflictingBundle(
  //   [
  //     '0xf903438247d9860c192ff21bd08307f6c494c040afa5d1c50b8970ececfb3fdfaec2fe44f9e580b902d91003f4863028b093fdac9cf7fd67c0df6866ac3c7a60070fd72adbced27fd10108000000000000000000006cbefa95e42960e579c2a3058c05c6a08e2498e9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20200000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe206000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000139ae64e36bd08a25300000000000000000000000000000000000000000000001390a439b0d6a9339d000000000000000000000000000000000000000000000000226ea0aea1b3a8008abb0156557c9d04a21b74c98f7a1e568fce9ce706eaeaeaaf13abadab000800010000000000000000fa6de2697d59e88ed7fc4dfe5a33dac43565ea410000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000001d452934ce60a430000000000000000000000000000000000000000000000000131668bcc7ed58a000000000000000000000000000000000000000000000030725865ef11c80000cd97f4ca351672c24be7cb5ebb3d8ebb9bed99e0070fd72adbced27fd10800000000000000000000001d42064fc4beb5f8aaf85f4617ae8b3b5b8bd8010000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984010000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001553a12e4e6b70599f922f86000000000000000000000000000000000000000015511e6d96f16b51931db09400000000000000000000000000000000000000000000005f2d176a52eefc00001ca01a6dad86b54953f74db59bfecca32b0f2158fab77826cd5088a93750bf52bfd9a01439a44c79a90df3a1a8e4fa5022a725748e4487c36cdb5fa3cc22b8f70c21e0'
  //   ],
  //   13417951
  // )

  const transactionHashs = JSON.parse(process.argv[2]).transactions
  // Format: '{"transactions": ["0x...", "0x...",...]'
  //'0x02f903f2011c843b9aca008504f2a67532830f518494396714fa7c538a7a33fc50f38069d7a3e5ac1d6280b903847cfc421f00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000a036fd706297986da0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000ea00000000000000000000000000000000000000000000000000000000000000020000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d0000000000000000000000000853d955acef822db058eb8505911ed77f175b99e000000000000000000000000e1573b9d29e2183b1af0e743dc2754979a40d237000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d0000000000000000000000000853d955acef822db058eb8505911ed77f175b99e000000000000000000000000b64508b9f7b81407549e13db970dd5bb5c19107f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000001bc5d5ce644ba9be1af92be47d2132b7aca66ab100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000c080a04f3489325c818367f5cf6aeeaf64069d1db008a2997328f1ea0b83b3764c2b75a0385a0b7288a9166a093174bbbbb3bde2440679bfbcb0ddab93288bae3ed63332'

  const blockNumber = process.argv[3] + 1

  //// Nonce collision (likely same tx, but could be any tx at that from/nonce)
  // const conflictReport = await flashbotsProvider.getConflictingBundle([transactionHash], blockNumber)

  const customConflictReport = await flashbotsProvider.getConflictingNonFlashbotsBundleWithoutGasPricing(transactionHashs, +blockNumber)

  //// No Bundles
  // const conflictReport = await flashbotsProvider.getConflictingBundle(
  //   [
  //     '0xf901ad82095a852ea3491a80830dbba09407b9b7d3354fea8f651e39e97aabdfac4176da5880b90144b3dfe91400000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2030000000000000000004db7ae1ed05522740000000000000000503827419ce132760000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000600000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe202000000000000000000000000795065dcc9f64b5614c407a6efdc400da6221fb00000000000000000000000d291e7a03283640fdc51b121ac401383a46cc623020000000000000000000000008c8d312554011f564aa54b0c2335139087037c840000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc201000000000000000000000000dc2b82bc1106c9c5286e59344896fb0ceb932f5326a036804d0a9f48f3f1154d8a8a52937bb31976bb3d4d5d5acd46cc9c605459dd8ca032f028ba273ab9fa0547d5abc785fb896946d4bab03ca990b68f5269f6735d5f'
  //   ],
  //   13140329
  // )

  // const customConflictReport = await flashbotsProvider.getConflictingNonFlashbotsBundleWithoutGasPricing(
  //   [
  //     '0xf901ad82095a852ea3491a80830dbba09407b9b7d3354fea8f651e39e97aabdfac4176da5880b90144b3dfe91400000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2030000000000000000004db7ae1ed05522740000000000000000503827419ce132760000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000600000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe202000000000000000000000000795065dcc9f64b5614c407a6efdc400da6221fb00000000000000000000000d291e7a03283640fdc51b121ac401383a46cc623020000000000000000000000008c8d312554011f564aa54b0c2335139087037c840000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc201000000000000000000000000dc2b82bc1106c9c5286e59344896fb0ceb932f5326a036804d0a9f48f3f1154d8a8a52937bb31976bb3d4d5d5acd46cc9c605459dd8ca032f028ba273ab9fa0547d5abc785fb896946d4bab03ca990b68f5269f6735d5f'
  //   ],
  //   13140329
  // )

  // console.log('Target Bundle Gas Pricing')
  // printGasPricing(conflictReport.targetBundleGasPricing)

  // if (conflictReport.conflictingBundleGasPricing !== undefined) {
  //   console.log('\nConflicting Bundle:', conflictReport.conflictingBundle)
  //   console.log('\nConflicting Bundle Gas Pricing')
  //   printGasPricing(conflictReport.conflictingBundleGasPricing)
  // }
  // console.log('Conflict Type: ' + FlashbotsBundleConflictType[conflictReport.conflictType])

  console.log('Custom function: ')
  console.log('\nConflicting Bundle:', customConflictReport.conflictingBundle)
  console.log('Conflict Type: ' + FlashbotsBundleConflictType[customConflictReport.conflictType])
}

main()
